[{"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\index.js":"1","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\store.js":"2","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\App.js":"3","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reportWebVitals.js":"4","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\userReducers.js":"5","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\productReducers.js":"6","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\orderReducers.js":"7","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\cartReducers.js":"8","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Footer.js":"9","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Header.js":"10","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\CartScreen.js":"11","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProductScreen.js":"12","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\Homescreen.js":"13","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\LoginScreen.js":"14","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\RegisterScreen.js":"15","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProfileScreen.js":"16","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\UserListScreen.js":"17","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ShippingScreen.js":"18","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\PlaceOrderScreen.js":"19","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\PaymentScreen.js":"20","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\OrderScreen.js":"21","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\OrderListScreen.js":"22","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\UserEditScreen.js":"23","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProductListScreen.js":"24","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProductEditScreen.js":"25","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\SearchBox.js":"26","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Loader.js":"27","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Message.js":"28","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Product.js":"29","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Rating.js":"30","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Paginate.js":"31","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\FormContainer.js":"32","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\ProductCarousel.js":"33","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\userConstants.js":"34","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\productConstants.js":"35","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\orderConstants.js":"36","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\cartConstants.js":"37","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\productActions.js":"38","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\orderActions.js":"39","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\cartAction.js":"40","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\userActions.js":"41","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\CheckoutSteps.js":"42"},{"size":614,"mtime":1662735970224,"results":"43","hashOfConfig":"44"},{"size":2503,"mtime":1662735970236,"results":"45","hashOfConfig":"44"},{"size":2208,"mtime":1662735970211,"results":"46","hashOfConfig":"44"},{"size":375,"mtime":1662735970227,"results":"47","hashOfConfig":"44"},{"size":4068,"mtime":1662735970227,"results":"48","hashOfConfig":"44"},{"size":4202,"mtime":1662735970226,"results":"49","hashOfConfig":"44"},{"size":4415,"mtime":1662735970226,"results":"50","hashOfConfig":"44"},{"size":1554,"mtime":1662735970225,"results":"51","hashOfConfig":"44"},{"size":401,"mtime":1662735982358,"results":"52","hashOfConfig":"44"},{"size":3081,"mtime":1662735982358,"results":"53","hashOfConfig":"44"},{"size":4703,"mtime":1662739104281,"results":"54","hashOfConfig":"44"},{"size":9610,"mtime":1662739104297,"results":"55","hashOfConfig":"44"},{"size":1473,"mtime":1662735970228,"results":"56","hashOfConfig":"44"},{"size":2706,"mtime":1662735970229,"results":"57","hashOfConfig":"44"},{"size":4092,"mtime":1662735970234,"results":"58","hashOfConfig":"44"},{"size":6436,"mtime":1662739104301,"results":"59","hashOfConfig":"44"},{"size":3479,"mtime":1662735970235,"results":"60","hashOfConfig":"44"},{"size":3660,"mtime":1662740915118,"results":"61","hashOfConfig":"44"},{"size":7034,"mtime":1662739104292,"results":"62","hashOfConfig":"44"},{"size":1649,"mtime":1662735970231,"results":"63","hashOfConfig":"44"},{"size":9853,"mtime":1662741515479,"results":"64","hashOfConfig":"44"},{"size":6750,"mtime":1662747429873,"results":"65","hashOfConfig":"44"},{"size":3797,"mtime":1662735970235,"results":"66","hashOfConfig":"44"},{"size":4857,"mtime":1662735970232,"results":"67","hashOfConfig":"44"},{"size":8160,"mtime":1662735970232,"results":"68","hashOfConfig":"44"},{"size":1140,"mtime":1662735970220,"results":"69","hashOfConfig":"44"},{"size":442,"mtime":1662735970218,"results":"70","hashOfConfig":"44"},{"size":238,"mtime":1662735970218,"results":"71","hashOfConfig":"44"},{"size":1165,"mtime":1662739618964,"results":"72","hashOfConfig":"44"},{"size":1892,"mtime":1662735970220,"results":"73","hashOfConfig":"44"},{"size":968,"mtime":1662735970218,"results":"74","hashOfConfig":"44"},{"size":404,"mtime":1662735970216,"results":"75","hashOfConfig":"44"},{"size":1404,"mtime":1662739104277,"results":"76","hashOfConfig":"44"},{"size":1508,"mtime":1662735970223,"results":"77","hashOfConfig":"44"},{"size":1511,"mtime":1662735970222,"results":"78","hashOfConfig":"44"},{"size":1262,"mtime":1662735970222,"results":"79","hashOfConfig":"44"},{"size":286,"mtime":1662735970221,"results":"80","hashOfConfig":"44"},{"size":6106,"mtime":1662735970213,"results":"81","hashOfConfig":"44"},{"size":6184,"mtime":1662735970213,"results":"82","hashOfConfig":"44"},{"size":1337,"mtime":1662735970212,"results":"83","hashOfConfig":"44"},{"size":7542,"mtime":1662735970214,"results":"84","hashOfConfig":"44"},{"size":1651,"mtime":1662735970215,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1k5v262",{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\index.js",[],["179","180"],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\store.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\App.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Header.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\CartScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProductScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\Homescreen.js",["181"],"import React, { useEffect } from 'react'\r\nimport { Row, Col, Pagination } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listProducts } from '../actions/productActions'\r\n\r\nfunction Homescreen({history}) {\r\n\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector( state => state.productList )\r\n    const { error, loading, products, page, pages } = productList\r\n\r\n    let keyword = history.location.search\r\n    \r\n    useEffect(() => {\r\n        dispatch(listProducts(keyword))\r\n    }, [dispatch, keyword])\r\n\r\n    return (\r\n        <div>\r\n            {!keyword && <ProductCarousel/>}\r\n            \r\n            <h1>Latest Products</h1>\r\n            { loading ? <Loader/>\r\n            : error ? <Message variant='secondary'>{error}</Message>\r\n            : \r\n            <div>\r\n            <Row>\r\n            { products.map(product =>(\r\n                <Col key = {product._id} sm={12} md={6} lg={4} xl={3}>\r\n                    <Product product={product}/>\r\n                </Col>\r\n            ))}\r\n        </Row>\r\n        <Paginate page={page} pages={pages} keyword={keyword}/>\r\n        </div>\r\n        }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homescreen\r\n","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\LoginScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\RegisterScreen.js",["182"],"import React, { useState, useEffect } from 'react'\r\nimport { Row, Col, Button, Form} from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen({location, history}) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const {error, loading, userInfo} = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo){\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if( password != confirmPassword){\r\n            setMessage('Password do not match')\r\n        }else{\r\n            dispatch(register(name ,email, password))\r\n        } \r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Register</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n            <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Re-Type Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Button \r\n                    type='submit'\r\n                    variant='primary'\r\n                > \r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                    to={redirect ? `/login?redirect=${redirect}` : '/login'}\r\n                    >\r\n                    Login\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProfileScreen.js",["183"],"import React, { useState, useEffect } from 'react'\r\nimport { Row, Col, Button, Form, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\n\r\n\r\nfunction ProfileScreen({ history }) {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {error, loading, user} = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { loading:loadingOrders, error:errorOrders, orders} = orderListMy\r\n\r\n    useEffect(() => {\r\n        if (!userInfo){\r\n            history.push('/login')\r\n        }else{\r\n            if(!user || !user.name || success || userInfo.id !== user._id){\r\n                dispatch({ type:USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            }else{\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch ,history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if( password != confirmPassword){\r\n            setMessage('Password do not match')\r\n        }else{\r\n            dispatch(updateUserProfile({ \r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n             }))\r\n             setMessage('')\r\n        } \r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={3} className=\"justify-content-md-center text-left\">\r\n                <h2>User Profile</h2>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n            <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                       \r\n                        type='text'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                   \r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                     \r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Re-Type Password</Form.Label>\r\n                    <Form.Control\r\n                    \r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n\r\n                </Form.Group>\r\n\r\n                <Button \r\n                    type='submit'\r\n                    variant='primary'\r\n                > \r\n                    Update\r\n                </Button>\r\n\r\n            </Form>\r\n            </Col>\r\n\r\n            <Col md={9}>\r\n            <h2>My Orders</h2>\r\n            {loadingOrders ? (\r\n                <Loader/>\r\n            ) : errorOrders ? (\r\n                <Message variant='danger'>{errorOrders}</Message>\r\n            ) : (\r\n                <Table striped responsive className='table'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Date</th>\r\n                            <th>Total</th>\r\n                            <th>Paid</th>\r\n                            <th>Delivered</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {orders.map(order => (\r\n                            <tr key={order._id}>\r\n                                <td>{order._id}</td>\r\n                                <td>{order.createdAt.substring(0,10)}</td>\r\n                                <td>৳{order.totalPrice}</td>\r\n                                <td>{order.isPaid ? order.paidAt.substring(0,10) : (\r\n                                    <i className='fas fa-times' style={{color: 'red'}}></i>\r\n                                )}</td>\r\n                                <td>\r\n                                    <LinkContainer to={`/order/${order._id}`}>\r\n                                        <Button className='btn-sm'>Details</Button>\r\n                                        </LinkContainer>\r\n                                </td>\r\n\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\UserListScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ShippingScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\PlaceOrderScreen.js",["184","185","186"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport { Link } from 'react-router-dom'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const {order, error, success} = orderCreate\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.shippingAddress.country===\"Dhaka\" ? 80 : 120).toFixed(2)\r\n    cart.taxPrice = Number(((0.082) * cart.itemsPrice).toFixed(2))\r\n    cart.totalPrice = Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)\r\n\r\n    if(!cart.paymentMethod){\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(success){\r\n            history.push(`/order/${order._id}`)\r\n            dispatch({\r\n                type:ORDER_CREATE_RESET\r\n            })\r\n            \r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            orderItems:cart.cartItems,\r\n            shippingAddress:cart.shippingAddress,\r\n            paymentMethod:cart.paymentMethod,\r\n            itemsPrice:cart.itemsPrice,\r\n            shippingPrice:cart.shippingPrice,\r\n            taxPrice:cart.taxPrice,\r\n            totalPrice:cart.totalPrice,\r\n        }))\r\n    }\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4/>\r\n            <Row>\r\n                <Col md={8} className='text-left'>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address}, {cart.shippingAddress.city}\r\n                                {'  '}\r\n                                {cart.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                                </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cart.cartItems.map((item, index)=> (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                    <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} X ৳{item.price} = ৳{(item.qty * item.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )}\r\n                            \r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Summary</h2>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Items:</Col>\r\n                                        <Col>৳{cart.itemsPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Shipping:</Col>\r\n                                        <Col>৳{cart.shippingPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Tax:</Col>\r\n                                        <Col>৳{cart.taxPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Total:</Col>\r\n                                        <Col>৳{cart.totalPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    {error && <Message variant='danger'>{error}</Message>}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Button\r\n                                        type='button'\r\n                                        className='btn-block'\r\n                                        disabled={cart.cartItems === 0}\r\n                                        onClick={placeOrder}\r\n                                    >\r\n                                        Place Order\r\n                                    </Button>\r\n                                </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\PaymentScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\OrderScreen.js",["187","188","189"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\n\r\nfunction OrderScreen({ match, history }) {\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n    const [SdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const {order, error, loading } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const {loading:loadingPay, success:successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const {loading:loadingDeliver, success:successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    if(!loading && !error){\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n\r\n    }\r\n    //AfY1fTL5NbMdYhD6oF7zofhgkBKSLg9x-jPV6Tdx5khbakWFxjAUHQjdbwOSjZ_f-d-yUBzjgXnD_GjD\r\n\r\n    const addPaypalScript = () =>{\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AfY1fTL5NbMdYhD6oF7zofhgkBKSLg9x-jPV6Tdx5khbakWFxjAUHQjdbwOSjZ_f-d-yUBzjgXnD_GjD'\r\n        script.async = true\r\n        script.onload = () =>{\r\n            setSdkReady(true)\r\n        }\r\n        document.body.appendChild(script)\r\n\r\n    }\r\n   \r\n\r\n    useEffect(() => {\r\n\r\n        if(!userInfo){\r\n            history.push('/login')\r\n        }\r\n\r\n        if(!order || successPay || order._id !== Number(orderId) || successDeliver ){\r\n            dispatch({ type:ORDER_PAY_RESET })\r\n            dispatch({ type:ORDER_DELIVER_RESET })\r\n            dispatch(getOrderDetails(orderId))\r\n        }else if(!order.isPaid){\r\n            if(!window.paypal){\r\n                addPaypalScript()\r\n            }else{\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n        \r\n        \r\n    }, [dispatch, order, orderId, successPay, successDeliver])\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n\r\n\r\n    return loading ? (\r\n        <Loader/>\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n        <div>\r\n            <h1>Order: {order._id}</h1>\r\n            <Row>\r\n                <Col md={8} className='text-left'>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p><strong>Name: </strong>{order.user.name}</p>\r\n                            <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {order.shippingAddress.address}, {order.shippingAddress.city}\r\n                                {'  '}\r\n                                {order.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {order.shippingAddress.country}\r\n                            </p>\r\n                            {order.isDelivered ? (\r\n                                <Message variant='success'>Paid on {order.deliveredAt}</Message>\r\n                            ):(\r\n                                <Message variant='warning'>Not Paid</Message>\r\n                            )}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {order.paymentMethod}\r\n                            </p>\r\n                            {order.isPaid ? (\r\n                                <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                            ):(\r\n                                <Message variant='warning'>Not Paid</Message>\r\n                            )}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {order.orderItems.length === 0 ? <Message variant='info'>\r\n                                Your order is empty\r\n                                </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {order.orderItems.map((item, index)=> (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                    <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} X ৳{item.price} = ৳{(item.qty * item.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )}\r\n                            \r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Summary</h2>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Items:</Col>\r\n                                        <Col>৳{order.itemsPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Shipping:</Col>\r\n                                        <Col>৳{order.shippingPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Tax:</Col>\r\n                                        <Col>৳{order.taxPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Total:</Col>\r\n                                        <Col>৳{order.totalPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n\r\n                                {!order.isPaid && (\r\n                                    <ListGroup.Item>\r\n                                       {loadingPay && <Loader/>} \r\n\r\n                                       {!SdkReady ? (\r\n                                           <Loader/>\r\n                                       ) : (\r\n                                        <>\r\n                                            <PayPalButton\r\n                                                amount={order.totalPrice}\r\n                                                onSuccess={successPaymentHandler}\r\n                                            />\r\n                                            <Button>\r\n                                                <img src='bkash.png' width={280}>\r\n                                                </img>\r\n                                            </Button>\r\n                                            </>\r\n                                       )}\r\n                                       \r\n                                    </ListGroup.Item>\r\n                                )}\r\n\r\n                                \r\n                        </ListGroup>\r\n                        {loadingDeliver && <Loader/>}\r\n                        {userInfo && userInfo.isAdmin  && order.isPaid && !order.isDelivered && (\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn btn-block'\r\n                                    onClick={deliverHandler}>\r\n                                    Mark As Deliver\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        )}\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderScreen\r\n","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\OrderListScreen.js",["190","191"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch();\r\n    const current = new Date();\r\n    const month = current.getMonth() + 1;\r\n    const day = current.getDate();\r\n    const date = `${current.getFullYear()}-${month < 10 ? `0${month}` : `${month}`}-${day < 10 ? `0${day}` : `${day}`}`;\r\n    console.log(date);\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const [todaysOrders, setTodaysOrders] = useState([])\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n    \r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders());\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            <h2>Todays Order</h2>\r\n            \r\n            {loading\r\n                ? <Loader />\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>User</th>\r\n                                    <th>Date</th>\r\n                                    <th>Total</th>\r\n                                    <th>Paid</th>\r\n                                    <th>Delivered</th>\r\n                                    <th> </th>\r\n                                </tr>\r\n\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <>\r\n                                        {order.createdAt.substring(0, 10) === date && (\r\n                                        <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>৳{order.totalPrice}</td>\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                        )}</td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                        )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='dark' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                    )}\r\n                                    </>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )\r\n            }\r\n\r\n            <h2>Total Order List ({orders && orders.length})</h2>\r\n            {loading\r\n                ? <Loader />\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>User</th>\r\n                                    <th>Date</th>\r\n                                    <th>Total</th>\r\n                                    <th>Paid</th>\r\n                                    <th>Delivered</th>\r\n                                    <th> </th>\r\n                                </tr>\r\n\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>৳{order.totalPrice}</td>\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                        )}</td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                        )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='dark' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen\r\n","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\UserEditScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProductListScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\screen\\ProductEditScreen.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\SearchBox.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Message.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Product.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\ProductCarousel.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\productActions.js",["192"],"import axios from 'axios'\r\nimport { \r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n } from '../constants/productConstants'\r\n\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST })\r\n\r\n        const{data} = await axios.get(`/api/products${keyword}`)\r\n\r\n        dispatch({ \r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error){\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\r\n\r\n        const{data} = await axios.get(`/api/products/${id}`)\r\n\r\n        dispatch({ \r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error){\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.delete(\r\n            `/api/products/delete/${id}`,\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:PRODUCT_DELETE_SUCCESS\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.post(\r\n            `/api/products/create`,\r\n            {},\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:PRODUCT_CREATE_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}`,\r\n            product,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/${productId}/reviews`,\r\n            review,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_TOP_REQUEST })\r\n\r\n        const{data} = await axios.get(`/api/products/top`)\r\n\r\n        dispatch({ \r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error){\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\orderActions.js",["193","194","195"],"import axios from 'axios'\r\nimport { \r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n    \r\n} from '../constants/orderConstants'\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.post(\r\n            '/api/order/add',\r\n            order,\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:ORDER_CREATE_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        dispatch({\r\n            type:CART_CLEAR_ITEMS,\r\n            payload:data\r\n        })\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get(\r\n            `/api/order/${id}`,\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:ORDER_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.put(\r\n            `/api/order/${id}/pay`,\r\n            paymentResult,\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:ORDER_PAY_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.put(\r\n            `/api/order/${order._id}/deliver`,\r\n            {},\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:ORDER_DELIVER_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get(\r\n            '/api/order/myorders',\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:ORDER_LIST_MY_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get(\r\n            '/api/order',\r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type:ORDER_LIST_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\cartAction.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\actions\\userActions.js",[],"C:\\Users\\mahad\\Desktop\\React-Django-Ecommerce\\frontend\\src\\components\\CheckoutSteps.js",[],{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":2,"column":20,"nodeType":"202","messageId":"203","endLine":2,"endColumn":30},{"ruleId":"204","severity":1,"message":"205","line":33,"column":22,"nodeType":"206","messageId":"207","endLine":33,"endColumn":24},{"ruleId":"204","severity":1,"message":"205","line":51,"column":22,"nodeType":"206","messageId":"207","endLine":51,"endColumn":24},{"ruleId":"200","severity":1,"message":"208","line":1,"column":28,"nodeType":"202","messageId":"203","endLine":1,"endColumn":36},{"ruleId":"200","severity":1,"message":"209","line":3,"column":10,"nodeType":"202","messageId":"203","endLine":3,"endColumn":23},{"ruleId":"210","severity":1,"message":"211","line":38,"column":8,"nodeType":"212","endLine":38,"endColumn":26,"suggestions":"213"},{"ruleId":"200","severity":1,"message":"209","line":3,"column":10,"nodeType":"202","messageId":"203","endLine":3,"endColumn":23},{"ruleId":"210","severity":1,"message":"214","line":70,"column":8,"nodeType":"212","endLine":70,"endColumn":62,"suggestions":"215"},{"ruleId":"216","severity":1,"message":"217","line":202,"column":49,"nodeType":"218","endLine":202,"endColumn":82},{"ruleId":"200","severity":1,"message":"219","line":20,"column":12,"nodeType":"202","messageId":"203","endLine":20,"endColumn":24},{"ruleId":"200","severity":1,"message":"220","line":20,"column":26,"nodeType":"202","messageId":"203","endLine":20,"endColumn":41},{"ruleId":"200","severity":1,"message":"221","line":91,"column":16,"nodeType":"202","messageId":"203","endLine":91,"endColumn":20},{"ruleId":"200","severity":1,"message":"222","line":14,"column":5,"nodeType":"202","messageId":"203","endLine":14,"endColumn":20},{"ruleId":"200","severity":1,"message":"223","line":19,"column":5,"nodeType":"202","messageId":"203","endLine":19,"endColumn":24},{"ruleId":"200","severity":1,"message":"224","line":28,"column":5,"nodeType":"202","messageId":"203","endLine":28,"endColumn":24},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-unused-vars","'Pagination' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useState' is defined but never used.","'LinkContainer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["227"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["228"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'todaysOrders' is assigned a value but never used.","'setTodaysOrders' is assigned a value but never used.","'data' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"233","text":"234"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"235","text":"236"},[1401,1419],"[success, history, order._id, dispatch]",[2482,2536],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]"]